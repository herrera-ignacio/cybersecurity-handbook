"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5821],{7681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(5893),s=t(1151);const o={},a="Exploiting Manual Web Application Findings",r={id:"books/hackerplaybook/exploiting-manual/README",title:"Exploiting Manual Web Application Findings",description:"* Overview",source:"@site/docs/books/hackerplaybook/exploiting-manual/README.md",sourceDirName:"books/hackerplaybook/exploiting-manual",slug:"/books/hackerplaybook/exploiting-manual/",permalink:"/cybersecurity-handbook/books/hackerplaybook/exploiting-manual/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Hacker Playbook",permalink:"/cybersecurity-handbook/books/hackerplaybook/"},next:{title:"Exploiting Scanner Findings",permalink:"/cybersecurity-handbook/books/hackerplaybook/exploiting-scan/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"SQLi",id:"sqli",level:2},{value:"XSS",id:"xss",level:2},{value:"XSS Obfuscation",id:"xss-obfuscation",level:3},{value:"CSRF",id:"csrf",level:2},{value:"Session Tokens",id:"session-tokens",level:2},{value:"Fuzzing/Input Validation",id:"fuzzinginput-validation",level:2},{value:"Functional/Business logic testing",id:"functionalbusiness-logic-testing",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"exploiting-manual-web-application-findings",children:"Exploiting Manual Web Application Findings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Overview"}),"\n",(0,i.jsx)(n.li,{children:"SQLi: SQL Injection"}),"\n",(0,i.jsx)(n.li,{children:"XSS: Cross-site scripting"}),"\n",(0,i.jsx)(n.li,{children:"CSRF: Cross-site request forgery"}),"\n",(0,i.jsx)(n.li,{children:"Session Token Entropy"}),"\n",(0,i.jsx)(n.li,{children:"Fuzzing/Input validation"}),"\n",(0,i.jsx)(n.li,{children:"Functional/Business logic testing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Although these aren't all of the different types of tests to validate, these generally provide the major findings and give you a good baseline for learning other types of web-based attacks."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In a network level penetration test, time is of the essence. You need to have a solid understanding of the underlying infrastructure, application, and possible vulnerabilities. You should understand how to identify those vulnerabilities, and what type of impact they might have if not resolved."}),"\n",(0,i.jsx)(n.h2,{id:"sqli",children:"SQLi"}),"\n",(0,i.jsx)(n.p,{children:"SQLi vulnerabilities can lead to a full compromise of the database or of the system itself. Two open source tools commonly used are SQLMap and Sqlninja."}),"\n",(0,i.jsx)(n.h2,{id:"xss",children:"XSS"}),"\n",(0,i.jsxs)(n.p,{children:["This is probably one of the most common vulnerabilities to identify. XSS is a user attack that is caused by the lack of input validation of the application. XSS attacks can be reflective and stored, which allow an attacker to write script code into a user's browser. With ",(0,i.jsx)(n.em,{children:"reflective XSS"})," we need to use social engineering to trick the victim into going to the link that will trigger the XSS. If it were ",(0,i.jsx)(n.em,{children:"stored XSS"}),", we most likely only need to wait until our code was executed."]}),"\n",(0,i.jsx)(n.p,{children:"If you find an XSS, you can not only cause a victim to become part of your pseudo-botnet, you can also steal the contents of the copy memory, redirect them to links, turn on their camera, and so much more."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"https://beefproject.com/",children:"BeEF: Browser exploitation framework"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"xss-obfuscation",children:"XSS Obfuscation"}),"\n",(0,i.jsx)(n.p,{children:"it is really common to find that the application provides some sort of input validation for these vulnerable XSS-fields. This means the XSS is still valid, but you don't have all the normal characters you need to successfully take advantage of this vulnerability. Nevertheless, these filters usually are improperly configured. Because there are so many different types of ways to encode your XSS attacks, the filters usually fail."}),"\n",(0,i.jsx)(n.p,{children:"Here are a quick and dirty tricks to get a working list of encoders:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Crowd Sourcing (e.g., ",(0,i.jsx)(n.a,{href:"https://www.reddit.com/r/xss"}),")"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html",children:"OWASP Evasion Cheat Sheet"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"csrf",children:"CSRF"}),"\n",(0,i.jsxs)(n.p,{children:["CSRF happens when ",(0,i.jsx)(n.strong,{children:"you can force an action to happen to a victim that is uwnanted"}),". In a correct process, there would be a CSRF token generated on every page and whenever you progressed through the application, it would verify the previous token. You can think of this as tracking the current session/process and if any of those tokens are empty or wrong, do not process a transaction."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"A typical example is that you send someone a link who is currently logged into their bank account. When they access the link you sent them, it automatically transfers money out of their account into your account. This happens because there is no verification that the user wen through the correct process to transfer money."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There are many complex ways to test this, but the one of the easiest is to manually run these tests is through proxying traffic. You'd go through the procfess of making a transaction and seeing if you can replay it without having to perform any additional actions."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For more information on CSRF check ",(0,i.jsx)(n.a,{href:"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",children:"OWASP CSRF Cheat Sheet"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"session-tokens",children:"Session Tokens"}),"\n",(0,i.jsx)(n.p,{children:"What you want to look for in a session token are:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The fact that they can't be guessed (properly randomizeed)."}),"\n",(0,i.jsx)(n.li,{children:"They properly track a user."}),"\n",(0,i.jsx)(n.li,{children:"When they expire."}),"\n",(0,i.jsx)(n.li,{children:"If they are secure, that they input, and that they are properly utilized."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We can use Burp to capture an authentication process, and see in the response that there is a ",(0,i.jsx)(n.code,{children:"set-cookie"})," value for the session tokens. Right click within the raw response section and send this request to the ",(0,i.jsx)(n.em,{children:"Sequencer"})," feature. From there you can identify which session tokens are important to you and then ",(0,i.jsx)(n.em,{children:"Start live capture"})," to start generating session tokens. After so many tokens, it will give you summaries of entropy (randomness), character-level analysis, and bit-level analysis."]}),"\n",(0,i.jsx)(n.p,{children:"It takes a lot of your own judgment and experience to uunderstand when session cookies are or aren't secure. Every major web application uses different types of implementations and algorithms to generate sessino tokens, so running manual tests and reviewing source code maybe required."}),"\n",(0,i.jsx)(n.h2,{id:"fuzzinginput-validation",children:"Fuzzing/Input Validation"}),"\n",(0,i.jsxs)(n.p,{children:["One quick feature of Burp Suite during manual testing is the ",(0,i.jsx)(n.em,{children:"Intruder"})," function, in which you have the ability to tamper with any part of the request and provide your own data."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Intruder"})," is very useful if you want to supply your own fuzzer input to test a variable."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Since we already have our traffic flowing through Burp, we can go to the ",(0,i.jsx)(n.em,{children:"Proxy"})," tab and to your ",(0,i.jsx)(n.em,{children:"History"})," tab. Right click on any request of your interest and then click ",(0,i.jsx)(n.em,{children:"Send to Intruder"}),". From here you can configure which parameters to test and which attack type to use (e.g., ",(0,i.jsx)(n.em,{children:"Sniper"}),"). From the ",(0,i.jsx)(n.em,{children:"Payloads"})," ta you can load a list of anything based on what I am interacting with (e.g., database, LPAD queries, number IDs)."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For more information, review ",(0,i.jsx)(n.a,{href:"https://portswigger.net/burp/documentation/desktop/tools/intruder/positions",children:"different types of attacks on Burp Suite"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After you start the attack, as the requests start populating, you can tell if a site is different based on parameter injection in different ways. One way to tell is by the length of the source code on that page when that string is injected."}),"\n",(0,i.jsx)(n.h2,{id:"functionalbusiness-logic-testing",children:"Functional/Business logic testing"}),"\n",(0,i.jsx)(n.p,{children:"Functional testing (i.e., horizontal/vertical user rights testing, application flow testing) is really where you make your money. This is where successful testers spend a majority of their time. Anyone can run scans, but if you are an effective and efficient manual tester, you are leagues above the norm."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Testing that users aren't able to see other user's sensitive data."}),"\n",(0,i.jsx)(n.li,{children:"Regular users can't access administrative pages."}),"\n",(0,i.jsx)(n.li,{children:"Users can't change data values of other users."}),"\n",(0,i.jsx)(n.li,{children:"Workflows cannot be modified outside their intended flow."}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["If you are interested in learning more, you can check ",(0,i.jsx)(n.a,{href:"https://owasp.org/www-pdf-archive/OWASP-Toronto-Dec-2018-Web_Application-Penetration-Testing.pdf",children:"OWASP Web Application Penetration Testing Guide"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);