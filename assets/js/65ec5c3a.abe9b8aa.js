"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7587],{7301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=n(5893),i=n(1151);const o={},r="DOM XSS",c={id:"offensive-security/xss/types/dom/README",title:"DOM XSS",description:"Overview",source:"@site/docs/offensive-security/xss/types/dom/README.md",sourceDirName:"offensive-security/xss/types/dom",slug:"/offensive-security/xss/types/dom/",permalink:"/cybersecurity-handbook/offensive-security/xss/types/dom/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Preventing XSS",permalink:"/cybersecurity-handbook/offensive-security/xss/preventing/"},next:{title:"Reflected XSS",permalink:"/cybersecurity-handbook/offensive-security/xss/types/reflected/"}},a={},d=[{value:"Overview",id:"overview",level:2},{value:"Sink",id:"sink",level:2},{value:"DOM Attacks",id:"dom-attacks",level:2}];function l(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"dom-xss",children:"DOM XSS"}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(t.p,{children:["DOM XSS is completely processed on the client-side, information is not sent to the back-end. It occurs when JavaScript is used to change the page source through the ",(0,s.jsx)(t.em,{children:"Document Object Model"})," (DOM)."]}),"\n",(0,s.jsx)(t.h2,{id:"sink",children:"Sink"}),"\n",(0,s.jsxs)(t.p,{children:["While the ",(0,s.jsx)(t.code,{children:"Source"})," is the JavaScript object that takes the user input (e.g., an input file), the ",(0,s.jsx)(t.code,{children:"Sink"})," is the function that writes the user input to a DOM object on the page (e.g., ",(0,s.jsx)(t.code,{children:"document.write()"}),")."]}),"\n",(0,s.jsxs)(t.p,{children:["If the ",(0,s.jsx)(t.code,{children:"Sink"})," function writes the exact input without any sanitization, and no other means of sanitizations were used, then the page should be vulnerable to XSS."]}),"\n",(0,s.jsx)(t.h2,{id:"dom-attacks",children:"DOM Attacks"}),"\n",(0,s.jsxs)(t.p,{children:["Note that ",(0,s.jsx)(t.code,{children:"innerHTML"})," function does not allow the use of the ",(0,s.jsx)(t.code,{children:"<script>"})," tags within it as a security feature. Still, there are many other XSS payloads like the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-console",children:'<img src="" onerror=alert(window.origin) />\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>r});var s=n(7294);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);