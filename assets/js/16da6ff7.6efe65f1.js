"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6668],{5773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(5893),s=t(1151);const r={},a="Null Terminator",l={id:"vulnerabilities/web/null-termination/README",title:"Null Terminator",description:"The null character (\\x00, %00, etc) is used to terminate C strings. That is, you have a series of characters ending with a null in memory. Most dynamic language implementations are written in C, including Python, PHP, Ruby, and most others. This legacy comes in handy.",source:"@site/docs/vulnerabilities/web/null-termination/README.md",sourceDirName:"vulnerabilities/web/null-termination",slug:"/vulnerabilities/web/null-termination/",permalink:"/cybersecurity-handbook/vulnerabilities/web/null-termination/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MIME Sniffing",permalink:"/cybersecurity-handbook/vulnerabilities/web/mime-sniffing/"},next:{title:"Parameter Tampering",permalink:"/cybersecurity-handbook/vulnerabilities/web/parameter-tampering/"}},o={},c=[{value:"Use case",id:"use-case",level:2},{value:"Implications",id:"implications",level:2},{value:"Testing",id:"testing",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"null-terminator",children:"Null Terminator"}),"\n",(0,i.jsxs)(n.p,{children:["The null character (",(0,i.jsx)(n.code,{children:"\\x00"}),", ",(0,i.jsx)(n.code,{children:"%00"}),", etc) is used to terminate C strings. That is, you have a series of characters ending with a null in memory. Most dynamic language implementations are written in C, including Python, PHP, Ruby, and most others. This legacy comes in handy."]}),"\n",(0,i.jsx)(n.h2,{id:"use-case",children:"Use case"}),"\n",(0,i.jsx)(n.p,{children:"Suppose we have the following inclusion script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\ninclude($_GET['page'] . '.php');\n?>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And suppose we want to read ",(0,i.jsx)(n.code,{children:"/etc/password"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If we throw a null byte at the end of the page variable, it might only read up to that point when opening the file, allowing us to read any file we want."}),"\n",(0,i.jsxs)(n.p,{children:["So we try ",(0,i.jsx)(n.code,{children:"?page=/etc/passwd%00"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"implications",children:"Implications"}),"\n",(0,i.jsx)(n.p,{children:"This attack could allow you to truncate strings at will, based on where in the application you're attempting to reach."}),"\n",(0,i.jsx)(n.p,{children:"When reading files, PHP uses native C functions (as most runtimes do), and due to a lack of proper string handling, this bug pops up all over the place."}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.p,{children:"Throw null bytes into anything related to file handling, particularly when dealing with PHP."}),"\n",(0,i.jsxs)(n.p,{children:["Most browsers will strip ",(0,i.jsx)(n.code,{children:"%00"})," from requests, or truncate them there. Burp will allow you to embed literal nulls as well as URLencoded nulls."]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var i=t(7294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);