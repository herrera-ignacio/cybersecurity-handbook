"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[941],{5846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=n(5893),o=n(1151);const s={},c="Tree / Star-bus",i={id:"networking/concepts/network-topologies/tree/README",title:"Tree / Star-bus",description:"Hybrid network topology in which star networks are interconnected via bus networks. Tree networks are hierarchical, and each node can have an arbitrary number of child nodes.",source:"@site/docs/networking/concepts/network-topologies/tree/README.md",sourceDirName:"networking/concepts/network-topologies/tree",slug:"/networking/concepts/network-topologies/tree/",permalink:"/cybersecurity-handbook/networking/concepts/network-topologies/tree/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Star",permalink:"/cybersecurity-handbook/networking/concepts/network-topologies/star/"},next:{title:"Packets",permalink:"/cybersecurity-handbook/networking/concepts/packets/"}},a={},d=[];function p(e){const t={h1:"h1",img:"img",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"tree--star-bus",children:"Tree / Star-bus"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(1375).Z+"",width:"196",height:"194"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Hybrid"})," network topology in which ",(0,r.jsx)(t.strong,{children:"star networks are interconnected via bus networks"}),". Tree networks are ",(0,r.jsx)(t.strong,{children:"hierarchical"}),", and each node can have an arbitrary number of child nodes."]})]})}function l(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},1375:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/2021-07-18-15-14-05-99242b06db8e4cabfb8e680146f3be3b.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>c});var r=n(7294);const o={},s=r.createContext(o);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);